#!/bin/bash

includes[0]="vars.conf"
includes[1]="base.conf"
includes[2]="colors.conf"
includes[3]="bar.conf"
includes[4]="gaps.conf"
includes[5]="workspace.conf"
includes[6]="windows.conf"
includes[7]="monitors.conf"
includes[8]="sound.conf"
includes[9]="modes.conf"
includes[9]="autostart.conf"
#includes[10]="lenovo-t460.conf"

i3_config_file="$HOME/.i3/config.test"
i3_fragments_dir="$HOME/.i3/config.d/"
i3_includes_file="$HOME/.i3/config.d/i3_configs.conf"

include_file() {
  file="$1"
  #echo "include file $file"
  cat "$file" >> "$i3_config_file"
}

generate() {
 [[ -f "$i3_config_file" ]] && rm "$i3_config_file"
 touch "$i3_config_file"

  echo "#### DO NOT EDIT THIS FILE, IT IS GENERATED." >> "$i3_config_file"
  echo "#### EDIT THE FILES HERE: ~/.i3/config.d/**/*" >> "$i3_config_file"

  for fragment_name in ${includes[*]}
  do 
    fragment_file="$i3_fragments_dir$fragment_name"
    if [ ! -f "$fragment_file" ]; then
      echo "Fragment $fragment_file not found!"
    else
      include_file "$fragment_file"
    fi
  done
}

generate_monitor_conf() {
  monitor_config="$HOME/.i3/config.d/monitors.config.test"

  opt_primary=`xrandr | grep " connected " | grep "primary" | grep -oP "^([\w-]*)\s"`
  monitors_connected=`xrandr | grep " connected " | grep -oP "^([\w-]*)\s"`
  monitors_disconnected=`xrandr | grep " disconnected " | grep -oP "^([\w-]*)\s"`
  all_monitors=(${monitors_connected[*]} ${monitors_disconnected[*]})
  primary="${opt_primary:-$monitors[0]}"
  echo "all ${all_monitors[*]}"

# xrandr --output DP2-2 --auto --right-of eDP1
# xrandr --output HDMI2 --auto --right-of eDP1
# xrandr --output VIRTUAL1 --off --output eDP1 --primary --mode 1920x1080 --pos 0x0 --rotate normal --output DP1 --off --output DP2-1 --off --output DP2-2 --off --output DP2-3 --off --output HDMI2 --off --output HDMI1 --off --output DP2 --off

    for monitor in ${all_monitors[*]}
  do
    echo "set \$$monitor \"xrandr --output $monitor --auto --right-of $primary\""
  done

  echo "set \$monitor Dock(d), HDMI(h), Laptop(l)"
  echo "mode \"\$monitor\" {"
  for monitor in ${all_monitors[*]}
  do
    echo "    bindsym d exec --no-startup-id \$$monitor, mode \"default\""
  done
  echo "    bindsym Return mode \"default\""
  echo "    bindsym Escape mode \"default\""
  echo "}"
}

generate_monitor_conf

generate

if [[ "$1" == "restart" || "$1" == "reload" ]]; then
  i3-msg "$1"
fi

# if [[ -f "$i3_includes_file" ]]; then
#   [[ -f "$i3_config_file" ]] && rm "$i3_config_file"

#   touch "$i3_config_file"

#   echo "#### DO NOT EDIT THIS FILE, IT IS GENERATED." >> "$i3_config_file"
#   echo "#### EDIT THE FILES HERE: ~/.i3/config.d/**/*" >> "$i3_config_file"

#   include_file() {
#     echo "include file $HOME/.i3/config.d/$1"
#     cat "$HOME/.i3/config.d/$1" >> "$i3_config_file"
#   }

#   get_file_name_from_line () {
#     removed_semicolon="${1%;*}"
#     removed_import="${removed_semicolon#import}"
#     stripped_file_name="$(echo $removed_import | sed 's/ //')"
#     echo "$stripped_file_name"
#   }

# for i in `ls *.fas | sort -V` 
# do 
#   echo
# done


#   exec 3< "$i3_includes_file"

#   until [ "$done" ]
#   do
#     read <&3 config_line

#     if [ $? != 0 ]; then
#       done=1
#       continue
#     else
#       if [[ $config_line == import* ]]; then
#         echo "loop on import $config_line"
#         file_name="$(get_file_name_from_line $config_line)"
#         echo "file $file_name"
#         include_file "$file_name"
#       fi
#     fi
#   done

#   if [[ "$1" == "restart" || "$1" == "reload" ]]; then
#     i3-msg "$1"
#   fi
# else
#   echo "ERROR:"
#   echo "Please create the configs import file:"
#   echo " ~/.i3/config.d/i3_configs.conf"
# fi